<?php

/**
 * @file
 * Functions to support theming.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Url;
use Drupal\file\FileInterface;
use Drupal\image\Entity\ImageStyle;
use Drupal\media\Entity\Media;
use Drupal\node\NodeInterface;
use Symfony\Component\HttpFoundation\Response;

/**
 * Implements hook_preprocess_image_widget().
 */
function drupalcamp_preprocess_image_widget(array &$variables): void {
  $data = &$variables['data'];

  // This prevents image widget templates from rendering preview container HTML
  // to users that do not have permission to access these previews.
  // @todo revisit in https://drupal.org/node/953034
  // @todo revisit in https://drupal.org/node/3114318
  if (isset($data['preview']['#access']) && $data['preview']['#access'] === FALSE) {
    unset($data['preview']);
  }
}

/**
 * Implements hook_preprocess_page().
 */
function drupalcamp_preprocess_page(array &$variables): void {
  /** @var \Drupal\Core\Extension\ThemeHandlerInterface $theme_handler */
  $theme_handler = \Drupal::service('theme_handler');
  $theme_path = $theme_handler->getTheme($theme_handler->getDefault())->getPath();

  $variables['page_title_image'] = '/' . $theme_path . '/images/page-title/default.webp';

  $node = \Drupal::routeMatch()->getParameter('node');
  if (!$node instanceof NodeInterface) {
    return;
  }

  if ($node->hasField('field_media_image') && !$node->get('field_media_image')->isEmpty()) {
    $media = $node->get('field_media_image')->entity;
    if ($media instanceof Media && $media->hasField('field_media_image')) {
      $image = $media->get('field_media_image')->entity;
      if ($image instanceof FileInterface && $image->getFileUri()) {
        $variables['page_title_image'] = ImageStyle::load('full_width')?->buildUrl($image->getFileUri());
      }
    }
  }

}

/**
 * Implements hook_preprocess_HOOK().
 */
function drupalcamp_preprocess_html(array &$variables): void {
  if ($current_request = \Drupal::requestStack()->getCurrentRequest()) {
    $status = $current_request->attributes->get('exception');

    if ($status && $status->getStatusCode() === Response::HTTP_NOT_FOUND) {
      $variables['attributes']['class'][] = 'path-error';
      $variables['attributes']['class'][] = 'path-error-404';
    }

    if ($status && $status->getStatusCode() === Response::HTTP_FORBIDDEN) {
      $variables['attributes']['class'][] = 'path-error';
      $variables['attributes']['class'][] = 'path-error-403';
    }
  }
}

/**
 * Implements hook_preprocess_links__language_block().
 */
function drupalcamp_preprocess_links__language_block(array &$variables): void {
  foreach ($variables['links'] as $language => &$link) {
    $full_text = $link['link']['#title'];
    $link['link']['#title'] = [
      '#markup' => '<span class="short-text">' . strtoupper($language) . '</span><span class="full-text">' . $full_text . '</span>',
    ];
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function drupalcamp_preprocess_email_wrap(array &$variables): void {
  $variables['front_page'] = Url::fromRoute('<front>', [], ['absolute' => TRUE])->toString();
  $variables['site_name'] = \Drupal::config('system.site')->get('name');
  $theme_path = \Drupal::service('extension.list.theme')->getPath('drupalcamp');
  $variables['logo'] = \Drupal::service('file_url_generator')->generateAbsoluteString($theme_path . '/logo-white.png');
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function drupalcamp_form_views_exposed_form_alter(array &$form, FormStateInterface $form_state): void {
  $form['actions']['submit']['#attributes']['class'][] = 'link--button--secondary link--button--small';

  if (!empty($form['actions']['reset'])) {
    $form['actions']['reset']['#attributes']['class'][] = 'link--button--primary-light link--button--small';
  }
}
